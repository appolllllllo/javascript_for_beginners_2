/* Объекты в JavaScript

В JavaScript есть специальные структуры данных, которые называются объектами (в других языках программирования они называются ассоциативными массивами или хешами).

Объекты создаются с помощью фигурных скобок { }, внутри которых пишутся элементы этого объекта в формате ключ: значение.

Давайте создадим пустой объект:

let obj = {};
А теперь создадим объект с данными:

let obj = {1: 'a', 2: 'b', 3: 'c'};
Выведем элемент объекта по его ключу:

console.log(obj[1]); // выведет 'a' */

/*
let obj = { 1: 'Понедельник', 2: 'Вторник', 3: 'Среда', 4: 'Четверг', 5: 'Пятница', 6: 'Суббота', 7: 'Воскресенье' };

console.log(obj);
*/

/* Вывод всего объекта в JavaScript

Содержимое всего объекта нельзя нормально посмотреть через функцию alert:

let obj = {1: 'a', 2: 'b', 3: 'c'};
alert(obj); // выведет [Object object]

Чтобы посмотреть содержимое всего объекта, нужно вывести его в консоль:

let obj = {1: 'a', 2: 'b', 3: 'c'};
console.log(obj); // выведет сам объект */

/*
let obj = { 1: 'Январь', 2: 'Февраль', 3: 'Март', 4: 'Апрель', 5: 'Май', 6: 'Июнь', 7: 'Июль', 8: 'Август', 9: 'Сентябрь', 10: 'Октябрь', 11: 'Ноябрь', 12: 'Декабрь' };

console.log(obj);
*/

/* Строковые ключи объектов в JavaScript

Ключами объектов могут быть строки:

let obj = {'a': 1, 'b': 2, 'c': 3};
При этом ключи-строки принято в кавычки не брать:

let obj = {a: 1, b: 2, c: 3};
Давайте выведем элемент нашего объекта по ключу:

console.log(obj['a']); // выведет 1 */

/*
let user = { name: 'Тата', surname: 'Апполонова', patronymic: 'Армановна' };

console.log(user['surname'] + ' ' + user['name'] + ' ' + user['patronymic']);
*/

/* Свойства объектов в JavaScript

Существует альтернативный способ обращения к элементам объекта. В этом способе мы после имени объекта ставим точку и пишем имя ключа. В этом случае ключ называется свойством объекта. Давайте посмотрим, как это делается. Пусть у нас есть следующий объект:

let obj = {a: 1, b: 2, c: 3};
Выведем на экран значение его свойства:

console.log(obj.a); // выведет 1 */

/*
let date = { year: 1997, month: 'November', day: 7 };

console.log(date.day + ' ' + date.month + ' ' + date.year);
*/

/* Ограничения на ключи объектов в JavaScript

Мы можем писать без кавычек не все ключи объектов, а только те, которые удовлетворяют следующим ограничениям: они не могут начинаться с цифры и не могут содержать внутри себя дефис, пробел и тому подобные вещи.

Если строка нарушает ограничение, то ее нужно брать в кавычки. В следующем примере в часть ключей не удовлетворяет условиям и поэтому стоят в кавычках:

let obj = {'1key': 'a', 'key-2': 'b', key3: 'c'};

К таким ключам можно обращаться только через квадратные скобки:

console.log(obj['1key']);
console.log(obj['key-2']);

Также обращение к таким именем через свойство объекта приведет к ошибке:

console.log(obj.1key);
console.log(obj.key-2);

А вот третий ключ - допустимый, и к нему мы можем обращаться обоими способами:

console.log(obj['key3']);
console.log(obj.key3); */

/* Для каких ключей данного объекта кавычки обязательны, а для каких нет?

let obj = {
	'1a': 1, //обязательны
	'b2': 2, //необязательны
	'с-с': 3, //обязательны
	'd 4': 4, //обязательны
	'e5': 5, //необязательны
}; */

/* Исправьте ошибки, допущенные в следующем коде:

let obj = {
	'1a': 1,
	'b2': 2,
	'c-c': 3,
	'd 4': 4,
	'e5': 5
};

console.log(obj['1a']);
console.log(obj.b2);
console.log(obj['c-c']);
console.log(obj['d 4']);
console.log(obj.e5); */

/* Изменение элементов объектов в JavaScript

Элементы объектов можно изменять, обращаясь к ним по ключам. Давайте посмотрим, как это делается. Пусть у нас есть следующий объект:

let obj = {a: 1, b: 2, c: 3};

Поменяем значение его элемента:

obj['a'] = '!';

Воспользуемся обращением через свойство:

obj.b = '!';

Проверим, изменился ли объект:

console.log(obj); */

/*
let obj = {x: 1, y: 2, z: 3};

obj['x'] = obj['x'] ** 2;
obj['y'] = obj['y'] ** 2;
obj['z'] = obj['z'] ** 2;

console.log(obj);
*/

/* Добавление элементов в объекты в JavaScript

В объекты можно добавлять новые элементы, записывая их в нужные ключи. Давайте посмотрим, как это делается. Пусть у нас есть следующий объект:

let obj = {};

Добавим в него новые элементы:

obj['a'] = 1;
obj['b'] = 2;
obj['c'] = 3;

Можно воспользоваться альтернативным синтаксисом:

obj.a = 1;
obj.b = 2;
obj.c = 3;

Проверим содержимое объекта:

console.log(obj); */

/*
let user = {};

user.surname = 'Апполонова';
user.name = 'Тата';
user.patronymic = 'Армановна';

console.log(user);
*/

/* Неупорядоченность объектов в JavaScript

В массивах элементы располагаются в строгом порядке, ведь позиция каждого элемента определяет его ключ. В объектах же мы сами назначаем ключи, поэтому порядок следования элементов не имеет значения. То есть массивы являются упорядоченными списками, а объекты - нет. */

/*
let obj = { 2: 'b', 1: 'a', 3: 'c'};

console.log(obj);
*/

/* Массив ключей объекта в JavaScript

Можно получить массив ключей объекта. Давайте посмотрим, как это делается. Пусть у нас есть следующий объект:

let obj = {a: 1, b: 2, c: 3};

Получим массив его ключей:

let keys = Object.keys(obj);

Выведем этот массив в консоль:

console.log(keys); */

/*
let obj = {x: 1, y: 2, z: 3};
let keys = Object.keys(obj);

console.log(keys);
*/

/* Длина объекта в JavaScript

У объектов нет свойства length, позволяющего найти их длину. Давайте убедимся в этом. Пусть у нас есть следующий объект:

let obj = {a: 1, b: 2, c: 3};

Попробуем узнать количество его элементов:

console.log(obj.length); // выведет undefined

Решим задачу обходным путем - получим массив ключей объекта и найдем его длину:

console.log(Object.keys(obj).length); // выведет 3 */

/*
let obj = { x: 1, y: 2, z: 3 };
let keys = Object.keys(obj);

console.log(keys);
*/

/* Ключи объектов из переменных в JavaScript

Ключи объектов могут храниться в переменных. Посмотрим на примере. Пусть у нас есть следующий объект:

let obj = {a: 1, b: 2, c: 3};

Пусть в переменной хранится ключ:

let key = 'a';

Выведем элемент объекта по ключу:

console.log(obj[key]); // выведет 1 */

/*
let obj = { x: 1, y: 2, z: 3 };
let key = 'z';

console.log(obj[key]);
*/

/* Ошибка обращения к элементу по ключу в JavaScript

При обращению к элементу объекта через квадратные скобки имена ключей нужно брать в кавычки, а имена переменных - нет. Не понимание этого часто может приводить к ошибкам. Поэтому давайте еще раз обсудим правила обращения.

В следующем коде мы из объекта получаем элемент с ключом 'key':

console.log(obj['key']);

А в следующем коде мы из объекта получаем элемент с ключом, имя которого хранится в переменной key:

console.log(obj[key]); */

/* Исправьте ошибку, допущенную в следующем коде:

let obj = {x: 1, y: 2, z: 3};

console.log(obj['x']); */

/* Исправьте ошибку, допущенную в следующем коде:

let obj = {x: 1, y: 2, z: 3};
let key = 'x';

console.log(obj[key]); */

/* Ошибка обращения к свойству объекта в JavaScript

При обращении к свойству объекта имя этого свойства не может хранится в переменной. Давайте посмотрим почему. Пусть у нас дан вот такой объект:

let obj = {a: 1, b: 2, c: 3};

Пусть в переменной хранится имя свойства, значение которого мы хотим получить:

let key = 'a';

Попробуем обратиться к свойству объекта, используя эту переменную:

console.log(obj.key); // undefined

Приведенный код не будет работать, так как фактически мы ищем свойство с именем 'key', а не свойство, чье имя хранится в переменной key. То есть фактически наш код эквивалентен следующему:

console.log(obj['key']); 

Единственным способом обратиться к элементу по ключу из переменной является запись этой переменной в квадратных скобках:

console.log(obj[key]); */

/* Исправьте ошибку, допущенную в следующем коде:

let obj = {x: 1, y: 2, z: 3};

let prop = 'x';
console.log(obj[prop]); */

/* Исправьте ошибку, допущенную в следующем коде:

let obj = {x: 1, y: 2, z: 3};

let prop = 'x';
console.log(obj[prop]); */

/* Вычисляемые свойства в JavaScript

При объявлении объекта имена его свойств могут браться из переменных. Такие свойства называются вычисляемыми. Давайте посмотрим, как это делается. Пусть у нас есть следующий объект:

let obj = {
	a: 1,
	b: 2,
	c: 3
};

Пусть имя некоторого свойства хранится в переменной:

let key = 'a';

Давайте сделаем так, чтобы вместо имени свойства взялось значение из нашей переменной. Для этого переменную следует взять в квадратные скобки:

let obj = {
	[key]: 1,
	b: 2,
	c: 3
};

При объявлении вычисляемых свойств можно выполнять некоторый код. Пример:

let obj = {
	[key + '1']: 1,
	[key + '2']: 2,
	[key + '3']: 3
}; */

/* В следующем коде ключ должен был взяться из переменной. Исправьте допущенную ошибку:

let key = 'x';

let obj = {
	[key]: 1,
	y: 2,
	z: 3
}; */

/* Дан объект:

let obj = {
	x: 1,
	y: 2,
	z: 3
};

Даны переменные:

let key1 = 'x';
let key2 = 'y';
let key3 = 'z';

Сделайте так, чтобы ключи объекта брались из этих переменных.

let key1 = 'x';
let key2 = 'y';
let key3 = 'z';

let obj = {
  [key1]: 1,
  [key2]: 2,
  [key3]: 3
}; */

/* Оператор in в JavaScript

С помощью оператора in можно проверять наличие свойства в объекте. Давайте посмотрим на примере. Пусть у нас дан вот такой объект:

let obj = {a: 1, b: 2, c: 3};

Давайте проверим наличие в нашем объекте какого-нибудь свойства:

console.log('b' in obj); // выведет true

А теперь выполним проверку для несуществующего свойства:

console.log('x' in obj); // выведет false */

/* Оператор delete в JavaScript

Можно удалять элементы объектов с помощью оператора delete. Давайте посмотрим на примерах. Пусть у нас дан вот такой объект:

let obj = {a: 1, b: 2, c: 3};

Давайте удалим один из элементов нашего объекта:

delete obj.b;

Посмотрим, что у нас получилось:

console.log(obj); // выведет {a: 1, c: 3};

/* Типизация объектов в JavaScript

Объекты имеют свой тип данных, который называется 'object'. Проверим с помощью оператора typeof:

console.log(typeof {}); // выведет 'object' */

/* Массивы как объекты в JavaScript

Массивы на самом деле являются частным случаем объектов. В этом можно убедится, если проверить массив через оператор typeof:

console.log(typeof []); // выведет 'object' */

/* Отличаем массивы от объектов в JavaScript

Как было указано выше, оператор typeof не позволяет различать массивы и объекты. Иногда, однако, это необходимо сделать. На помощь придет функция Array.isArray():

console.log( Array.isArray([]) ); // выведет true
console.log( Array.isArray({}) ); // выведет false */

/* Объекты и примитивы в JavaScript

Объекты (в том числе и массивы, как вы уже знаете) считаются сложными типами данных. Строки, числа, логические значения считаются простыми, или примитивными типами данных. Их часто так и называют - примитивы, подразумевая все то, что не является объектом.

В JavaScript семь примитивных типов данных: string, number, boolean, null, undefined, symbol, bigint. Запомните их количество и названия - это часто спрашивают на собеседованиях. */

/* Передача объектов по ссылке в JavaScript

Массивы и объекты несколько отличаются от остальных примитивных типов данных. Отличие в том, что переменная, хранящая массив, на самом деле не содержит его, а просто ссылается на него.

На практике это означает, что при записи объекта в другую переменную, обе переменных будут ссылаться на один и тот же объект. Давайте попробуем на практике. Пусть у нас есть следующий объект:

let obj1 = {a: 1, b: 2, c: 3};

Присвоим его из одной переменной в другую:

let obj2 = obj1;

Изменим одну из переменных:

obj2.a = '!';

В результате изменения будут видны и в другой переменной:

console.log(obj1); // {a: '!', b: 2, c: 3} */

/* Константы с массивами или объектами в JavaScript 

Константы, содержащие массивы и объекты, работают интересным образом. JavaScript не разрешает изменять значения этих констант, но изменять свойства объектов и значения элементов массивов - можно.

Давайте посмотрим на примерах. Пусть у нас дан вот такой объект:

const obj = {a: 1, b: 2, c: 3};
Давайте попробуем записать в него что-то другое:

obj = 123; // ошибка
Давайте попробуем записать в константу другой объект:

obj = {x: 1, y: 2, z: 3}; // ошибка
Однако, если мы попробуем изменить свойство объекта, то это сработает:

obj.a = '+'; // работает! */

/* Подход программирования через константы в JavaScript

В последнее время в JavaScript возник новый подход к объявлению переменных. Суть подхода в том, что вместо let мы везде используем const, кроме тех случаев, когда мы точно знаем, что значение будет переменным.

Смотрите пример:

const a = 1;
const b = 2;
const c = a + b;

console.log(c);

Этот подход очень популярный и вы можете встретить его в различных сторонних источниках.

Я, однако, против этого модного подхода. Дело в том, что константы были придуманы для хранения значений типа числа Пи. То есть для таких значений, которые предопределены в вашей программе. Объявление же всех переменных константами противоречит этой идее.

Кроме того, не очень логично поведение массивов и объектов - мы объявляем их константами, при этом спокойно можем изменять их свойства. Что это за константы, если их можно изменять?

Часто объявление объектов константами используется для того, чтобы мы не смогли сменить тип данных - вместо объекта записать примитив. Но если нам нужен контроль типов, которого нет по умолчанию в JavaScript, то лучше воспользоваться его диалектом TypeScript.

В общем, вы можете пользоваться этим подходом, раз такая мода, но я против и дальше в учебнике переменные по-прежнему будут объявляться через let, как это было задумано авторами языка. */

/*
const arr = [1, 2, 3, 4, 5];
const res = arr[1] + arr[2];

console.log(res);
*/

/* Поиск ошибок в коде с объектами JavaScript */

/* Код должен вывести элемент объекта:

let obj = {x: 1, y: 2, z: 3};

console.log(obj['x']); */

/* Код должен вывести элемент объекта по ключу из переменной:

let obj = {x: 1, y: 2, z: 3};
let key = 'x';

console.log(obj[key]); */

/* Код должен вывести сумму элементов объекта:

let obj = {x: 1, y: 2, z: 3};
let sum = obj['x'] + obj['y'] + obj['x'];

console.log(sum); */

/* Код должен вывести количество элементов объекта:

let obj = {x: 1, y: 2, z: 3};

console.log(Object.keys(obj).length); */