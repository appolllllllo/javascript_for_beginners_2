/* "use strict";
alert('Привет, мир!'); 
*/

/* let num;

num = 123;
alert(num);

let a = 1;
let b = 2;
let c = 3;

let a = 1, b = 2, c = 3;

let a, b, c;

a = 1;
b = 2;
c = 3;
*/

/*
let a;

a = 10;
alert(a);

a = 20;
alert(a);
*/

/*
let a = 1 + 2 + 3;
alert(a);
*/

/*
let a = 10;
let b = 2;

alert(a + b);
alert(a - b);
alert(a * b);
alert(a / b);
*/

/*
let c = 10;
let d = 5;

let result = c + d;

alert(result);
*/

/*
let a, b, c;

a = 1;
b = 2;
c = 3;

alert(a + b + c);
*/

/*
let a = 10;
let b = 5;
let c = a - b;
let d = 7;
let result = c + d;

alert(result);
*/

/*
let a = 1.5;
let b = 0.75;

alert(a + b);
*/

/*
let a = -100;

alert(a);
*/

/*
let a = 7;

alert(-a);
*/

/*
let a = 13;
let b = 5;

alert(a % b);
*/

/*
let a = 2;
let b = 10;

alert(a ** b);
*/

/*
let a = 'Тата';
let b = 'Апполонова';

alert(a + ' ' + b);
*/

/*
let str = '!!!';

alert(str);
*/

/*
let a = 'java';
let b = 'script';

alert(a + b);
*/

/*
let a = 'hello';
let b = 'world';

alert(a + ' ' + b);
*/

/*
let str = 'Я люблю тебя';

alert(str.length);
*/

/* В косых кавычках можно выполнять вставку переменных. Для этого имя переменной нужно написать в конструкции ${}.

let str1 = 'xxx';
let str2 = 'yyy';
let txt = `aaa ${str1} bbb ${str2} ccc`;

alert(txt); */

/* В JavaScript строках, созданных через одинарные или двойные кавычки, не допустим перенос строки. А вот косые кавычки специально предназначены для создания многострочных строк:

let str = `a
b
c`;

alert(str); */

/* Значение undefined обозначает неопределенность. Такое значение будет у переменной, если мы объявили ее, но не записали в нее значение:

let a;
alert(a); */

/* Значение null обозначает "ничего". К примеру, мы можем присвоить переменной такое значение в знак того, что там ничего не лежит:

let a = null;
alert(a); */

/* Значения true и false обозначают истину и ложь соответственно. Они используются для таких вещей, которые предполагают два варианта ответа - да или нет.

let isActive = true;

alert(isActive);

let isHidden = false;

alert(isHidden); */

/* Значение NaN (Not-A-Number) обозначает не число. Такое значение получается тогда, когда вы пытаетесь делать математические операции не с числами, а с чем-то другим. К примеру, такое значение даст попытка умножить строку на число: 

alert('abc' * 3); */

/* Значения Infinity и -Infinity обозначают соответственно бесконечность и минус бесконечность. Такие значения получаются, если какое-то число поделить на ноль - в этом случает JavaScript не выдает ошибку, как в других языках программирования, а возвращает эти значения: 

alert(10 / 0);
alert(-10 / 0); */

/* С помощью специальной команды console.log вы в своих скриптах можете выводить данные в консоль. 

let num = 123;
console.log(num); */

/*
let num1 = 123;
let num2 = 234;
let num3 = 345;

console.log(num1, num2, num3);
*/

/*
console.log(42);             // Число (number) → cиний
console.log(3.14);           // Дробное число → синий
console.log('Привет');       // Строка (string) → черный
console.log("мир");

console.log(true);           // Логический тип (boolean) → синий
console.log(false);

console.log(undefined);      // undefined → серый
console.log(null);           // null → серый

console.log(NaN);            // NaN (не число) → синий
console.log(Infinity);       // Infinity → синий
*/

/* Кроме переменных в JavaScript можно создавать еще и константы. В них можно записывать данные только один раз, а затем их значения нельзя изменять. Константы объявляются с помощью оператора const.

Обычно константы используются для значений, которые не должны быть случайно изменены в коде. Для примера сделаем константу, в которой будет хранится значение числа пи:

const pi = 3.14; */

/*
 let radius = 5;
 const pi = 3.14;
 let circumference = 2 * pi * radius;

 console.log(circumference);
 */

/* С + JS предпочитает конкатенацию строк .
С -, *, / и % — всегда происходит преобразование к числу . */

/*
let a = Number("10");
let b = Number("20");

alert(a + b);
*/

/*Часто для сокращения кода вместо Number перед строкой ставят знак +. Таким образом над строкой выполняется операция, допустимая только для чисел и строка переводится в число.

let a = +'2';
let b = +'3';
alert(a + b); */

/* Если нам необходимо достать стоящее в начале число, отбросив строковую часть, мы используем функцию parseInt.

Но в случае с дробными числами функция parseInt пасует и выводит только целую часть.

Для дробных чисел мы можем использовать функцию parseFloat, которая извлекает число вместе с его дробной частью.\

Отсутствие дробной части не мешает функции parseFloat работать корректно. */

/*
let a = parseInt("5px");
let b = parseInt("6px");

alert(a + b);
*/

/*
let a = parseFloat("5.5px");
let b = parseFloat("6.25px");

alert(a + b);
*/

/*
let a = parseFloat("5.5px");
let b = parseFloat("6.25px");

alert((a + b) + "px");
*/

/*
let a = String(3);
let b = String(4);

alert(a + b);
*/

/*
let a = 3;
let b = 4;

alert(String(a) + String(b));
*/

/*
let num = String(1234567);

alert(num.length);
*/

/*
let num = 1234567;

alert((String(num)).length);
*/

/*
let num1 = String(3);
let num2 = String(4);

alert(num1.length + num2.length);
*/

/* При преобразовании специальных значений true и false к строкам - значение true преобразуется в строку "true", а значение false - в строку "false".

При преобразовании специальных значений true и false в числа - значение true преобразуется в число 1, а значение faLse - в число 0. */

/* Преобразование к логическому типу в JavaScript осуществляется с помощью функции Boolean.

Pначения, которые при приведению к логическому типу дают false:

console.log(Boolean(0));          // false
console.log(Boolean(-0));         // false
console.log(Boolean(+0));         // false
console.log(Boolean(null));       // false
console.log(Boolean(false));      // false
console.log(Boolean(NaN));        // false
console.log(Boolean(undefined));  // false
console.log(Boolean(''));         // false

Все остальные значения в JavaScript (в других языках бывает не так) дают true.
Вот значения, приводящиеся к true, которые могут вызвать у вас сомнения:

console.log(Boolean(-1));          // true
console.log(Boolean(Infinity));    // true
console.log(Boolean(-Infinity));   // true

Следующие значения являются строками, так как взяты в кавычки, и также приводятся к true:

console.log(Boolean('0'));         // true
console.log(Boolean('false'));     // true
console.log(Boolean('NaN'));       // true
console.log(Boolean('null'));      // true
console.log(Boolean('undefined')); // true */

/*Получение символов строки на JavaScript

При необходимости можно получить доступ к определенному символу строки по его номеру. Для этого пишется имя переменной, после этого имени ставятся квадратные скобки [] и в этих скобках указывается номер символа. 

Каждый символ имеет свой порядковый номер: первый символ номер 0, второй символ - номер 1, третий символ номер 2 и так далее.*/

/*
let str = "abcde";

alert(str[0]);
alert(str[2]);
alert(str[4]);
*/

/*
let str = "abcde";

let newStr = str[4] + str[3] + str[2] + str[1] + str[0];

alert(newStr);
*/

/*
str = "abcde";
num = 2;

alert(str[num]);
*/

/* Неизменяемость строк в JavaScript

Символы строк можно читать, но нельзя изменять. Следующий пример кода выдаст ошибку (в строгом режиме):

let str = 'abcde';
str[0] = '!'; */

/* Последний символ строки в JavaScript */

/*
let str = "abcde";
let last = str.length - 1 // номер последнего символа

alert(str[last]);
*/

/*
let str = "abcde";

alert(str[str.length - 1]);
*/

/*
let str = "abcde";
let last = str.length - 2;

alert(str[last]);
*/

/*
let str = "abcde";

alert(str[str.length - 2]);
*/

/*
let str = "abcde";
let last = str.length - 3;

alert(str[last]);
*/

/*
let str = "abcde";

alert(str[str.length - 3]);
*/

/* Строки с цифрами в JavaScript */

/*
let str = "12345";

alert(Number(str[0]) + Number(str[1]) + Number(str[2]) + Number(str[3]) + Number(str[4]));
*/

/* Обращение к цифрам числа в JavaScript */

/*
let num = String(12345);

alert(Number(num[0]) + Number(num[1]) + Number(num[2]) + Number(num[3]) + Number(num[4]));
*/

/*
let num = String(12345);

alert(Number(num[0]) * Number(num[1]) * Number(num[2]) * Number(num[3]) * Number(num[4]));
*/

/*
let num = String(12345);

alert(Number((num[4]) + (num[3]) + (num[2]) + (num[1]) + (num[0])));
*/

/* Сокращенные операции в JavaScript

Для таких операций, когда в переменную записывается ее текущее значение плюс еще что-то, существует специальный сокращенный синтаксис. В этом синтаксисе вместо обычного присваивания применяется специальный оператор +=. Давайте посмотрим на примере:

let num = 1;
num += 3; // эквивалентно num = num + 3;
Существуют аналогичные операторы для остальных математических операций:

let num = 2;
num -= 3; // эквивалентно num = num - 3;
let num = 2;
num *= 3; // эквивалентно num = num * 3;
let num = 2;
num /= 3; // эквивалентно num = num / 3; */

/*
let num = 47;
num += 7;
num -= 18;
num *= 10;
num /= 15;

alert(num);
*/

/* Операции инкремента и декремента в JavaScript 

На самом деле прибавление единицы в программировании встречается так часто, что для этой операции придуман еще более сокращенный синтаксис - специальный оператор инкремент ++, увеличивающий значение переменной на 1.

Перепишем наш код с его помощью:

let num = 0;
num++;        // прибавляем к переменной a число 1
alert(num);   // выведет 1
Есть также операция декремент --, уменьшающая значение переменной на 1. Смотрите пример:

let num = 0;
num--;        // отнимаем от переменной num число 1
alert(num);   // выведет -1 */

/*
let num = 10;
num++;
num++;
num--;

alert(num);
*/

/* Префиксный и постфиксный тип в JavaScript

На самом деле операции инкремента и декремента можно записывать двумя способами.

На самом деле операции инкремента и декремента можно записывать двумя способами.

Первая форма называется постфиксной, а вторая - префиксной.

Пусть у нас есть код alert(a++) и код alert(++a).

В случае alert(a++) переменная сначала выведется, а потом увеличится на единицу, а в случае alert(++a) переменная сначала увеличится на единицу, а потом выведется.*/

/* Неточные вычисления в JavaScript

Дроби хранятся в компьютерах в таком виде, что часто могут быть представлены неточно. В этом случае вас может ждать некоторый сюрприз, когда банальная операция выдает странный результат. Пример:

let a = 0.1 + 0.2;
alert(a); // выведет 0.30000000000000004

Для борьбы с таким поведением можно применить специальный метод toFixed, выполняющий округление до заданного знака в дробной части. Давайте округлим наш результат:

let a = 0.1 + 0.2;
alert(a.toFixed(2)); // выведет '0.30'

Метод toFixed отдает результат в виде строки. Можно преобразовать его результат в число:

let a = 0.1 + 0.2;
alert(+a.toFixed(2)); // выведет 0.3 */

/*
alert(0.1 * 0.2);

alert(0.3 - 0.1);
*/

/* Функция prompt в JavaScript

Вы уже знаете о существовании функции alert, выводящей заданное сообщение на экран. Существует также похожая функция prompt, которая позволяет получить от пользователя какой-либо текст. */

/*
let age = prompt("Введитте ваш возраст: ");
alert(age);
*/

/* Проблема с типами в функции prompt в JavaScript

Учтите, что функция prompt всегда возвращает строку, даже если пользователь вводил число. Для примера рассмотрите следующий скрипт:

let num1 = prompt('Введите первое число');
let num2 = prompt('Введите второе число');

alert(num1 + num2); // сложит числа как строки */

/*
let num1 = prompt("Введите первое число: ");
let num2 = prompt("Введите второе число: ");

alert(Number(num1) + Number(num2));
*/

/*
let side = prompt("Введите сторону квадрата: ");
let area = side * side;

alert(area);
*/

/*
let height = prompt("Введите высоту прямоугольника: ");
let width = prompt("Введите ширину прямоугольника: ");
let perimetr = 2 * (height + width);

alert(perimetr);
*/

/* Вывод текста в документ в JavaScript

Средствами JavaScript можно управлять тегами HTML страницы, например, выводить в них текст. Этому мы будем учиться позднее, когда будем проходить раздел, посвященный работе с DOM.

Иногда, однако, в отладочных целях требуется вывести какой-нибудь текст в окно браузера. Это делается с помощью команды document.write. Посмотрим работу с ней на примерах.

Выведем числовое значение:

document.write(123);

Выведем какой-нибудь текст:

document.write('text');

Выведем текст, заключенный в теги:

document.write('<b>text</b>');

Выведем текст из переменной:

let str = 'text';
document.write(str);

Заключим текст из переменной в теги:

let str = 'text';
document.write('<b>' + str + '</b>');

Выведем текст с два ряда:

document.write('text <br> text');

Выведем много текстов в колонку:

document.write('text1<br>');
document.write('text2<br>');
document.write('text3<br>');

Можно и вот так:

document.write('text');
document.write('<br>');
document.write('text'); */

/* document.write("<i>И мир не тот,<br>и мы не те,<br>и все вокруг не то.</i>"); */

/*
let str = 'text';
document.write("<i>" + str + "</i>")
*/

/*
document.write("1<br>2<br>3<br>4<br>5");
*/

/* Поиск ошибок в коде */

/* Код должен находить сумму чисел:

let num1 = 1;
let num2 = 2;
console.log('Cумма: ', num1 + num2); */

/* Код должен находить сумму чисел: 

let a = 1;
let b = 2;
console.log(a + b); */

/* Код должен находить сумму цифр числа:

let num = '123';
let sum = Number(num[0]) + Number(num[1]) + Number(num[2]);
console.log(sum); */

/* Код должен вывести первую цифру числа:

let num = "123";
console.log(num[0]); */

/* Код должен был вывести в консоль число 1, но выводит 0:

let a = 0;
console.log(++a); */

/* Код должен вывести количество цифр в числе:

let num = "123";
console.log(num.length); */

/* Код должен найти количество секунд в сутках:

let a = 24 * (60 * 60);
console.log(a); */

/* Код должен вывести количество цифр в числе:

let num = 123;
let str = String(num);
console.log(str.length); */

/* Код должен вывести последнюю цифру числа:

let num = 123;
let str = String(num);
console.log(str[str.length - 1]); */

/* Код должен вывести количество цифр в числе:

let num = 123;
let str = String(num);
console.log(str.length); */

/* Код должен вывести последнюю цифру числа:

let num = 123;
let str = String(num);
console.log(str[str.length - 1]); */

/* Код должен найти сумму чисел:

let a = '123';
let b = '456';
let s = Number(a) + Number(b);

console.log(s); */

/* Код должен найти сумму чисел:

let aaa = 1;
let bbb = 2;
let ccc = 3;

console.log(aaa + bbb + ccc); */

/* Практика на операции в JavaScript */

/* Найдите количество секунд в сутках:

alert(24 * 60 ** 2); */

/* Найдите количество секунд в 30 сутках:

alert(30 * (24 * 60 ** 2)); */

/* Найдите количество секунд в году.

alert(365 * (24 * 60 ** 2)); */

/* Найдите количество минут в сутках:

alert(24 * 60); */

/* Найдите количество минут в году:

alert(365 * (24 * 60)); */

/* Найдите количество байт в мегабайте:

alert(1024 ** 2); */

/* Найдите количество байт в гигабайте:

alert(1024 ** 3); */

/* Найдите количество байт в 10 гигабайтах:

alert(10 * 1024 ** 3); */


/* Найдите количество байт в терабайте:

alert(1024 ** 4); */

/* Найдите количество килобайт в терабайте:

alert(1024 ** 4 / 1024); */

/* Практика на формулы в JavaScript */

/* Пусть дана переменная r с радиусом круга. По соответствующей формуле найдите площадь круга и запишите ее в переменную s. Выведите содержимое этой переменной на экран:

let r = 5;
const pi = 3.14;

let s = pi * r ** 2;

alert(s); */

/* Пусть дана переменная a со стороной квадрата. Найдите площадь квадрата и запишите ее в переменную s. Выведите содержимое этой переменной на экран.

let a = 3;

let s = a * a;

alert(s); */

/* Пусть даны переменные a и b со сторонами прямоугольника. Найдите площадь прямоугольника и запишите ее в переменную s. Выведите содержимое этой переменной на экран.

let a = 3;
let b = 4;

let s = a * b;

alert(s); */

/* Пусть даны переменные a и b со сторонами прямоугольника. Найдите периметр прямоугольника и запишите его в переменную p. Выведите содержимое этой переменной на экран.

let a = 3;
let b = 4;

let p = 2 * (a + b);

alert(p); */

/* Пусть дана переменная tc с температурой в градусах Цельсия. По соответствующей формуле выполните перевод этой температуры в градусы Фаренгейта.

let tc = 25;
let tf = tc * ( 9 / 5) + 32;

alert(tf); */

/* Пусть дана переменная tf с температурой в градусах Фаренгейта. По соответствующей формуле выполните перевод этой температуры в градусы Цельсия.

let tf = 77;
let tc =  (tf - 32) * (5 / 9);

alert(tc); */