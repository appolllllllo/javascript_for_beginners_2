/* Массивы в JavaScript

Массив представляет собой переменную, в которой в упорядоченном виде можно хранить целый набор каких-то значений.

Значения, которые хранит массив, называются элементами. Элементы разделяются между собой запятой. После этой запятой принято ставить пробелы.

Для создания массива используются квадратные скобки

Кроме строк и чисел в массиве можно хранить все допустимые типы данных, а также смешивать их между собой в одном массиве, пример:

let arr = [1, 2, 'a', 'b', null, true, false]; */

/*
let arr = [1, 2, 3, 4, 5, 6, 7];

alert(arr);

console.log(arr);
*/

/*
let arr = ["a", "b", "c"];

alert(arr);
console.log(arr);
*/

/* Получение элементов массивов в JavaScript

Обращение к элементам массива осуществляется подобно обращениям к символам строки. Каждый элемент массива имеет свой номер: первый элемент - номер 0, второй - номер 1 и так далее. Эти номера называются ключами элементов массива. */

/*
let arr = [1, 2, 3];

console.log(arr[0]);
console.log(arr[1]);
console.log(arr[2]);
*/

/*
let arr = [1, 2, 3];

console.log(arr[0] + arr[1] + arr[2]);
*/

/*
let arr = ['a', 'b', 'c', 'd'];

console.log(arr[0] + arr[1] + arr[2] + arr[3]);
*/

/* Длина массива в JavaScript

Длина массива находится с помощью свойства length:

let arr = ['a', 'b', 'c'];
console.log(arr.length) // выведет 3
Зная длину массива, можно получить его последний элемент:

let arr = ['a', 'b', 'c'];
console.log(arr[arr.length - 1]) // выведет 'c' */

/*
let arr = [1, 'a', 2, 'b'];
console.log(arr.length);
*/

/*
let arr = [1, 'a', 2, 'b'];
console.log(arr[arr.length - 1]);
*/

/* Изменение элементов массива в JavaScript

let arr = ['a', 'b', 'c'];

arr[0] = '!';
console.log(arr); // выведет ['!', 'b', 'c'] */

/*
let arr = ['a', 'b', 'c'];

arr[0] = 1;
arr[1] = 2;
arr[2] = 3;

console.log(arr);
*/

/* Перезапись элементов массива в JavaScript

Можно также прочитывать текущее значение элемента, выполнять с ним какие-то операции и записывать измененное значение обратно в этот элемент:

let arr = ['a', 'b', 'c'];

arr[0] = arr[0] + '!';
arr[1] = arr[1] + '!';
arr[2] = arr[2] + '!';

console.log(arr); // выведет ['a!', 'b!', 'c!']
Предыдущий код можно переписать через оператор +=:

let arr = ['a', 'b', 'c'];

arr[0] += '!';
arr[1] += '!';
arr[2] += '!';

console.log(arr); // выведет ['a!', 'b!', 'c!'] */

/*
let arr = [1, 2, 3];

arr[0] += '3';
arr[1] += '3';
arr[2] += '3';

console.log(arr);
*/

// Инкремент и декремент элементов массива в JavaScript

/*
let arr = [1, 2, 3];

++arr[0];
++arr[1];
++arr[2];

console.log(arr); 
*/


/* Добавление элементов по ключам JavaScript

Элементы в массив не обязательно добавлять сразу в момент объявления этого массива. Можно вначале объявить этот массив, а затем добавить в него необходимые элементы. Nакже добавлять элементы в массив, уже заполненный данными. */

/*
let arr = [];

arr[0] = 1;
arr[1] = 2;
arr[2] = 3;

console.log(arr);
*/

/*
let arr = [1, 2, 3];

arr[3] = 4;
arr[4] = 5;

console.log(arr);
*/

/* Разреженные массивы в JavaScript

Если в массиве будут ключи с пропусками, то можно получить разреженный массив. Давайте посмотрим, как он выглядит. Пусть у нас есть некоторый массив:

let arr = ['a', 'b', 'c'];

Добавим к этому массиву еще один элемент так, чтобы ключи имели пропуски:
arr[4] = '!';

В результате в массиве образуется дыра, имеющая значение undefined:

console.log(arr); // выведет ['a', 'b', 'c', undefined, '!']

// Длина массива будет вкючать в себя все дыры.
// То есть в нашем случае она будет 5, а не 4:

console.log(arr.length); // выведет 5 */

/*
let arr = [];

arr[3] = 'a';
arr[8] = 'b';

console.log(arr.length);
*/

/* Добавление элементов через push в JavaScript

С помощью специального метода push можно добавлять элементы в конец массива. */

/*
let arr = [];

arr.push(1);
arr.push(2);
arr.push(3);

console.log(arr);
*/

/*
let arr = [1, 2, 3];

arr.push(4);
arr.push(5);

console.log(arr);
*/

/* Ключи массивов из переменных в JavaScript

Пусть у нас дан вот такой массив:

let arr = ['a', 'b', 'c'];
Выведем на экран элемент с ключом 0:

let arr = ['a', 'b', 'c'];
console.log(arr[0]); // выведет 'a'

Давайте теперь ключ выводимого элемента не будем писать непосредственно в квадратных скобках, а запишем его в переменную:

let arr = ['a', 'b', 'c'];
let key = 0; // запишем ключ в переменную
Используем теперь нашу переменную для вывода соответствующего элемента:

let arr = ['a', 'b', 'c'];
let key = 0; // запишем ключ в переменную

console.log(arr[key]); // выведет 'a' */

/*
let arr = ['a', 'b', 'c'];

let key = 2;

console.log(arr[key]);
*/

/*
let arr = [1, 2, 3, 4, 5];

let key1 = 1;
let key2 = 2;

console.log(arr[key1] + arr[key2]);
*/

/*
Оператор delete в массивах в JavaScript

Можно удалять элементы массивов с помощью оператора delete. Давайте посмотрим на примерах. Пусть у нас дан вот такой массив:

let arr = ['a', 'b', 'c'];
Давайте удалим один из элементов нашего массива:

delete arr[1];
В результате элемент удалится, но массив станет разреженным:

console.log(arr); // выведет ['a',, 'c'] */

/*
let arr = ['a', 'b', 'c', 'd', 'e'];

delete arr[2];
delete arr[4];

console.log(arr.length);
*/

// Поиск ошибок в коде с массивами JavaScript

/* Код должен вывести последний элемент массива:

let arr = [1, 2, 3, 4, 5];

console.log(arr[4]); */

/* Код должен найти сумму элементов массива:

let arr = [1, 2, 3, 4, 5];

console.log(arr[0] + arr[1] + arr[2]  + arr[3] + arr[4]); */

/* Код должен вывести длину массива:

let arr = [1, 2, 3, 4, 5];

console.log(arr.length) */

/* Код должен вывести длину массива:

let arr = [1, 2, 3, 4, 5];
console.log(arr.length); */
